from aenum import Enum
from gremlin_python import statics as statics
from gremlin_python.process.graph_traversal import GraphTraversal as GraphTraversal
from gremlin_python.process.traversal import Barrier as Barrier, Binding as Binding, Bytecode as Bytecode, Cardinality as Cardinality, Column as Column, Direction as Direction, Operator as Operator, Order as Order, P as P, Pick as Pick, Pop as Pop, Scope as Scope, T as T, TextP as TextP, Traversal as Traversal, TraversalStrategy as TraversalStrategy, Traverser as Traverser
from gremlin_python.statics import ByteBufferType as ByteBufferType, DictType as DictType, FloatType as FloatType, FunctionType as FunctionType, GremlinType as GremlinType, IntType as IntType, ListType as ListType, LongType as LongType, SetType as SetType, SingleByte as SingleByte, SingleChar as SingleChar, TypeType as TypeType
from gremlin_python.structure.graph import Edge as Edge, Graph as Graph, Path as Path, Property as Property, Vertex as Vertex, VertexProperty as VertexProperty
from typing import Any, Optional

log: Any

class DataType(Enum):
    null: int = ...
    int: int = ...
    long: int = ...
    string: int = ...
    date: int = ...
    timestamp: int = ...
    clazz: int = ...
    double: int = ...
    float: int = ...
    list: int = ...
    map: int = ...
    set: int = ...
    uuid: int = ...
    edge: int = ...
    path: int = ...
    property: int = ...
    graph: int = ...
    vertex: int = ...
    vertexproperty: int = ...
    barrier: int = ...
    binding: int = ...
    bytecode: int = ...
    cardinality: int = ...
    column: int = ...
    direction: int = ...
    operator: int = ...
    order: int = ...
    pick: int = ...
    pop: int = ...
    lambda_: int = ...
    p: int = ...
    scope: int = ...
    t: int = ...
    traverser: int = ...
    bigdecimal: int = ...
    biginteger: int = ...
    byte: int = ...
    bytebuffer: int = ...
    short: int = ...
    boolean: int = ...
    textp: int = ...
    traversalstrategy: int = ...
    bulkset: int = ...
    tree: int = ...
    metrics: int = ...
    traversalmetrics: int = ...
    char: int = ...
    duration: int = ...
    inetaddress: int = ...
    instant: int = ...
    localdate: int = ...
    localdatetime: int = ...
    localtime: int = ...
    monthday: int = ...
    offsetdatetime: int = ...
    offsettime: int = ...
    period: int = ...
    year: int = ...
    yearmonth: int = ...
    zonedatetime: int = ...
    zoneoffset: int = ...
    custom: int = ...

NULL_BYTES: Any
int64_pack: Any
int64_unpack: Any
int32_pack: Any
int32_unpack: Any
int8_pack: Any
int8_unpack: Any
uint64_pack: Any
uint64_unpack: Any
uint8_pack: Any
uint8_unpack: Any
float_pack: Any
float_unpack: Any
double_pack: Any
double_unpack: Any

class GraphBinaryTypeType(type):
    def __new__(mcs: Any, name: Any, bases: Any, dct: Any): ...

class GraphBinaryWriter:
    serializers: Any = ...
    def __init__(self, serializer_map: Optional[Any] = ...) -> None: ...
    def writeObject(self, objectData: Any): ...
    def toDict(self, obj: Any, to_extend: Optional[Any] = ...): ...

class GraphBinaryReader:
    deserializers: Any = ...
    def __init__(self, deserializer_map: Optional[Any] = ...) -> None: ...
    def readObject(self, b: Any): ...
    def toObject(self, buff: Any, data_type: Optional[Any] = ..., nullable: bool = ...): ...

class _GraphBinaryTypeIO(metaclass=GraphBinaryTypeType):
    python_type: Any = ...
    graphbinary_type: Any = ...
    symbolMap: Any = ...
    @classmethod
    def prefix_bytes(cls, graphbin_type: Any, as_value: bool = ..., nullable: bool = ..., to_extend: Optional[Any] = ...): ...
    @classmethod
    def read_int(cls, buff: Any): ...
    @classmethod
    def unmangle_keyword(cls, symbol: Any): ...
    @classmethod
    def is_null(cls, buff: Any, reader: Any, else_opt: Any, nullable: bool = ...): ...
    def dictify(self, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...) -> None: ...
    def objectify(self, d: Any, reader: Any, nullable: bool = ...) -> None: ...

class LongIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    byte_format_pack: Any = ...
    byte_format_unpack: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class IntIO(LongIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    byte_format_pack: Any = ...
    byte_format_unpack: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class DateIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class TimestampIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

NAN: Any
POSITIVE_INFINITY: Any
NEGATIVE_INFINITY: Any

class FloatIO(LongIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    graphbinary_base_type: Any = ...
    byte_format_pack: Any = ...
    byte_format_unpack: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class DoubleIO(FloatIO):
    graphbinary_type: Any = ...
    graphbinary_base_type: Any = ...
    byte_format_pack: Any = ...
    byte_format_unpack: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class CharIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class StringIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class ListIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class SetDeserializer(ListIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class MapIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class UuidIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class EdgeIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class PathIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class PropertyIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class TinkerGraphIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...) -> None: ...
    @classmethod
    def objectify(cls, b: Any, reader: Any, as_value: bool = ...) -> None: ...

class VertexIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class VertexPropertyIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class _EnumIO(_GraphBinaryTypeIO):
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class BarrierIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class CardinalityIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class ColumnIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class DirectionIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class OperatorIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class OrderIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class PickIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class PopIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class BindingIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class BytecodeIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class TraversalIO(BytecodeIO):
    python_type: Any = ...

class LambdaSerializer(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...

class PSerializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    python_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...

class ScopeIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class TIO(_EnumIO):
    graphbinary_type: Any = ...
    python_type: Any = ...

class TraverserIO(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    python_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class ByteIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class ByteBufferIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class BooleanIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class TextPSerializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    python_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...

class BulkSetDeserializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class MetricsDeserializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class TraversalMetricsDeserializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...

class ClassSerializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    python_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...

class TraversalStrategySerializer(_GraphBinaryTypeIO):
    graphbinary_type: Any = ...
    python_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...

class DurationIO(_GraphBinaryTypeIO):
    python_type: Any = ...
    graphbinary_type: Any = ...
    @classmethod
    def dictify(cls, obj: Any, writer: Any, to_extend: Any, as_value: bool = ..., nullable: bool = ...): ...
    @classmethod
    def objectify(cls, buff: Any, reader: Any, nullable: bool = ...): ...
