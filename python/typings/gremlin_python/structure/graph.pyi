from gremlin_python.process.graph_traversal import GraphTraversalSource as GraphTraversalSource
from gremlin_python.process.traversal import TraversalStrategies as TraversalStrategies
from typing import Any, Optional

class Graph:
    def __init__(self) -> None: ...
    def traversal(self, traversal_source_class: Optional[Any] = ...): ...

class Element:
    id: Any = ...
    label: Any = ...
    def __init__(self, id: Any, label: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class Vertex(Element):
    def __init__(self, id: Any, label: str = ...) -> None: ...

class Edge(Element):
    outV: Any = ...
    inV: Any = ...
    def __init__(self, id: Any, outV: Any, label: Any, inV: Any) -> None: ...

class VertexProperty(Element):
    value: Any = ...
    key: Any = ...
    vertex: Any = ...
    def __init__(self, id: Any, label: Any, value: Any, vertex: Any) -> None: ...

class Property:
    key: Any = ...
    value: Any = ...
    element: Any = ...
    def __init__(self, key: Any, value: Any, element: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

class Path:
    labels: Any = ...
    objects: Any = ...
    def __init__(self, labels: Any, objects: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
