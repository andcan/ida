from gremlin_python.structure.io import graphbinaryV1 as graphbinaryV1, graphsonV2d0 as graphsonV2d0, graphsonV3d0 as graphsonV3d0
from typing import Any, Optional

class Processor:
    def __init__(self, writer: Any) -> None: ...
    def get_op_args(self, op: Any, args: Any): ...

class Standard(Processor):
    def authentication(self, args: Any): ...
    def eval(self, args: Any): ...

class Traversal(Processor):
    def authentication(self, args: Any): ...
    def bytecode(self, args: Any): ...
    def close(self, args: Any): ...
    def gather(self, args: Any): ...
    def keys(self, args: Any): ...

class GraphSONMessageSerializer:
    DEFAULT_READER_CLASS: Any = ...
    DEFAULT_WRITER_CLASS: Any = ...
    DEFAULT_VERSION: bytes = ...
    standard: Any = ...
    traversal: Any = ...
    def __init__(self, reader: Optional[Any] = ..., writer: Optional[Any] = ..., version: Optional[Any] = ...) -> None: ...
    @property
    def version(self): ...
    def get_processor(self, processor: Any): ...
    def serialize_message(self, request_id: Any, request_message: Any): ...
    def build_message(self, request_id: Any, processor: Any, op: Any, args: Any): ...
    def finalize_message(self, message: Any, mime_len: Any, mime_type: Any): ...
    def deserialize_message(self, message: Any): ...

class GraphSONSerializersV2d0(GraphSONMessageSerializer):
    def __init__(self) -> None: ...

class GraphSONSerializersV3d0(GraphSONMessageSerializer):
    def __init__(self) -> None: ...

class GraphBinarySerializersV1:
    DEFAULT_READER_CLASS: Any = ...
    DEFAULT_WRITER_CLASS: Any = ...
    DEFAULT_VERSION: bytes = ...
    max_int64: int = ...
    header_struct: Any = ...
    header_pack: Any = ...
    int_pack: Any = ...
    int32_unpack: Any = ...
    standard: Any = ...
    traversal: Any = ...
    def __init__(self, reader: Optional[Any] = ..., writer: Optional[Any] = ..., version: Optional[Any] = ...) -> None: ...
    @property
    def version(self): ...
    def get_processor(self, processor: Any): ...
    def serialize_message(self, request_id: Any, request_message: Any): ...
    def build_message(self, request_id: Any, processor: Any, op: Any, args: Any): ...
    def finalize_message(self, message: Any, mime_len: Any, mime_type: Any): ...
    def deserialize_message(self, message: Any): ...
