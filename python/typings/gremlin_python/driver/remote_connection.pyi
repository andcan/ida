import abc
from gremlin_python.driver import request as request
from gremlin_python.process import traversal as traversal
from typing import Any

class RemoteConnection(metaclass=abc.ABCMeta):
    def __init__(self, url: Any, traversal_source: Any) -> None: ...
    @property
    def url(self): ...
    @property
    def traversal_source(self): ...
    @abc.abstractmethod
    def submit(self, bytecode: Any) -> Any: ...

class RemoteTraversal(traversal.Traversal):
    traversers: Any = ...
    def __init__(self, traversers: Any, side_effects: Any) -> None: ...
    @property
    def side_effects(self): ...
    @side_effects.setter
    def side_effects(self, val: Any) -> None: ...

class RemoteTraversalSideEffects(traversal.TraversalSideEffects):
    def __init__(self, side_effect: Any, client: Any, status_attributes: Any) -> None: ...
    @property
    def status_attributes(self): ...
    def keys(self): ...
    def get(self, key: Any): ...
    def close(self): ...

class RemoteStrategy(traversal.TraversalStrategy):
    remote_connection: Any = ...
    def __init__(self, remote_connection: Any) -> None: ...
    def apply(self, traversal: Any) -> None: ...
    def apply_async(self, traversal: Any) -> None: ...
