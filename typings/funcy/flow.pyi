"""
This type stub file was generated by pyright.
"""

from .decorators import contextmanager, decorator

def raiser(exception_or_class=..., *args, **kwargs):
    """Constructs function that raises the given exception
       with given arguments on any invocation."""
    ...

def ignore(errors, default=...):
    """Alters function to ignore given errors, returning default instead."""
    ...

def silent(func):
    """Alters function to ignore all exceptions."""
    ...

@contextmanager
def reraise(errors, into):
    """Reraises errors as other exception."""
    ...

@decorator
def retry(call, tries, errors=..., timeout=..., filter_errors=...):
    """Makes decorated function retry up to tries times.
       Retries only on specified errors.
       Sleeps timeout or timeout(attempt) seconds between tries."""
    ...

def fallback(*approaches):
    """Tries several approaches until one works.
       Each approach has a form of (callable, expected_errors)."""
    ...

class ErrorRateExceeded(Exception):
    ...


def limit_error_rate(fails, timeout, exception=...):
    """If function fails to complete fails times in a row,
       calls to it will be intercepted for timeout with exception raised instead."""
    ...

@decorator
def post_processing(call, func):
    """Post processes decorated function result with func."""
    ...

collecting = post_processing(list)
@decorator
def joining(call, sep):
    """Joins decorated function results with sep."""
    ...

def once_per(*argnames):
    """Call function only once for every combination of the given arguments."""
    ...

once = once_per()
def once_per_args(func):
    """Call function once for every combination of values of its arguments."""
    ...

@decorator
def wrap_with(call, ctx):
    """Turn context manager into a decorator"""
    ...

