"""
This type stub file was generated by pyright.
"""

import sys
from .compat import PY2

def decorator(deco):
    """
    Transforms a flat wrapper into decorator::

        @decorator
        def func(call, methods, content_type=DEFAULT):  # These are decorator params
            # Access call arg by name
            if call.request.method not in methods:
                # ...
            # Decorated functions and all the arguments are accesible as:
            print(call._func, call_args, call._kwargs)
            # Finally make a call:
            return call()
    """
    ...

def make_decorator(deco, dargs=..., dkwargs=...):
    ...

class Call(object):
    """
    A call object to pass as first argument to decorator.

    Call object is just a proxy for decorated function
    with call arguments saved in its attributes.
    """
    def __init__(self, func, args, kwargs) -> None:
        ...
    
    def __call__(self, *a, **kw):
        ...
    
    def __getattr__(self, name):
        ...
    


if PY2:
    def has_single_arg(func):
        ...
    
else:
    def has_single_arg(func):
        ...
    
def get_argnames(func):
    ...

def arggetter(func, _cache=...):
    ...

if sys.version_info >= (3, 4):
    ...
else:
    ...
def update_wrapper(wrapper, wrapped, assigned=..., updated=...):
    ...

def wraps(wrapped, assigned=..., updated=...):
    """
    An utility to pass function metadata from wrapped function to a wrapper.
    Copies all function attributes including ``__name__``, ``__module__`` and
    ``__doc__``.

    In addition adds ``__wrapped__`` attribute referring to the wrapped function
    and ``__original__`` attribute referring to innermost wrapped one.

    Mostly used to create decorators::

        def some_decorator(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                do_something(*args, **kwargs)
                return func(*args, **kwargs)
            return wrapper

    But see also :func:`@decorator<decorator>` for that.
    This is extended version of :func:`functools.wraps`.
    """
    ...

