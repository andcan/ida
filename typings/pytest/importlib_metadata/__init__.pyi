"""
This type stub file was generated by pyright.
"""

import io
import abc
import sys
import email
import builtins
import contextlib
import pathlib
from __future__ import absolute_import, unicode_literals
from configparser import ConfigParser
from itertools import filterfalse
from importlib.abc import MetaPathFinder

if sys.version_info > (3, ):
    FileNotFoundError = builtins.FileNotFoundError
    IsADirectoryError = builtins.IsADirectoryError
    NotADirectoryError = builtins.NotADirectoryError
    PermissionError = builtins.PermissionError
    map = builtins.map
else:
    ...
str = type('')
suppress = contextlib.suppress
if sys.version_info > (3, 5):
    ...
else:
    ...
if sys.version_info >= (3, ):
    ...
else:
    ...
__metaclass__ = type
def install(cls):
    """
    Class decorator for installation on sys.meta_path.

    Adds the backport DistributionFinder to sys.meta_path and
    attempts to disable the finder functionality of the stdlib
    DistributionFinder.
    """
    ...

def disable_stdlib_finder():
    """
    Give the backport primacy for discovering path-based distributions
    by monkey-patching the stdlib O_O.

    See #91 for more background for rationale on this sketchy
    behavior.
    """
    ...

class NullFinder:
    """
    A "Finder" (aka "MetaClassFinder") that never finds any modules,
    but may find distributions.
    """
    @staticmethod
    def find_spec(*args, **kwargs):
        ...
    
    find_module = ...


def py2_message_from_string(text):
    ...

email_message_from_string = py2_message_from_string if sys.version_info < (3, ) else email.message_from_string
class PyPy_repr:
    """
    Override repr for EntryPoint objects on PyPy to avoid __iter__ access.
    Ref #97, #102.
    """
    affected = ...
    def __compat_repr__(self):
        ...
    
    if affected:
        __repr__ = ...


def unique_everseen(iterable):
    "List unique elements, preserving order. Remember all elements ever seen."
    ...

unique_ordered = unique_everseen if sys.version_info < (3, 7) else dict.fromkeys
