"""
This type stub file was generated by pyright.
"""

import argparse
import warnings
import py
import six
from _pytest.config.exceptions import UsageError

FILE_OR_DIR = "file_or_dir"
class Parser(object):
    """ Parser for command line arguments and ini-file values.

    :ivar extra_info: dict of generic param -> value to display in case
        there's an error processing the command line arguments.
    """
    prog = ...
    def __init__(self, usage=..., processopt=...) -> None:
        ...
    
    def processoption(self, option):
        ...
    
    def getgroup(self, name, description=..., after=...):
        """ get (or create) a named option Group.

        :name: name of the option group.
        :description: long description for --help output.
        :after: name of other group, used for ordering --help output.

        The returned group object has an ``addoption`` method with the same
        signature as :py:func:`parser.addoption
        <_pytest.config.Parser.addoption>` but will be shown in the
        respective group in the output of ``pytest. --help``.
        """
        ...
    
    def addoption(self, *opts, **attrs):
        """ register a command line option.

        :opts: option names, can be short or long options.
        :attrs: same attributes which the ``add_option()`` function of the
           `argparse library
           <http://docs.python.org/2/library/argparse.html>`_
           accepts.

        After command line parsing options are available on the pytest config
        object via ``config.option.NAME`` where ``NAME`` is usually set
        by passing a ``dest`` attribute, for example
        ``addoption("--long", dest="NAME", ...)``.
        """
        ...
    
    def parse(self, args, namespace=...):
        ...
    
    def parse_setoption(self, args, option, namespace=...):
        ...
    
    def parse_known_args(self, args, namespace=...):
        """parses and returns a namespace object with known arguments at this
        point.
        """
        ...
    
    def parse_known_and_unknown_args(self, args, namespace=...):
        """parses and returns a namespace object with known arguments, and
        the remaining arguments unknown at this point.
        """
        ...
    
    def addini(self, name, help, type=..., default=...):
        """ register an ini-file option.

        :name: name of the ini-variable
        :type: type of the variable, can be ``pathlist``, ``args``, ``linelist``
               or ``bool``.
        :default: default value if no ini-file option exists but is queried.

        The value of ini-variables can be retrieved via a call to
        :py:func:`config.getini(name) <_pytest.config.Config.getini>`.
        """
        ...
    


class ArgumentError(Exception):
    """
    Raised if an Argument instance is created with invalid or
    inconsistent arguments.
    """
    def __init__(self, msg, option) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class Argument(object):
    """class that mimics the necessary behaviour of optparse.Option

    it's currently a least effort implementation
    and ignoring choices and integer prefixes
    https://docs.python.org/3/library/optparse.html#optparse-standard-option-types
    """
    _typ_map = ...
    def __init__(self, *names, **attrs) -> None:
        """store parms in private vars for use in add_argument"""
        ...
    
    def names(self):
        ...
    
    def attrs(self):
        ...
    
    def __repr__(self):
        ...
    


class OptionGroup(object):
    def __init__(self, name, description=..., parser=...) -> None:
        ...
    
    def addoption(self, *optnames, **attrs):
        """ add an option to this group.

        if a shortened version of a long option is specified it will
        be suppressed in the help. addoption('--twowords', '--two-words')
        results in help showing '--two-words' only, but --twowords gets
        accepted **and** the automatic destination is in args.twowords
        """
        ...
    


class MyOptionParser(argparse.ArgumentParser):
    def __init__(self, parser, extra_info=..., prog=...) -> None:
        ...
    
    def error(self, message):
        """Transform argparse error message into UsageError."""
        ...
    
    def parse_args(self, args=..., namespace=...):
        """allow splitting of positional arguments"""
        ...
    


class DropShorterLongHelpFormatter(argparse.HelpFormatter):
    """shorten help for long options that differ only in extra hyphens

    - collapse **long** options that are the same except for extra hyphens
    - special action attribute map_long_option allows surpressing additional
      long options
    - shortcut if there are only two options and one of them is a short one
    - cache result on action object as this is called at least 2 times
    """
    ...


