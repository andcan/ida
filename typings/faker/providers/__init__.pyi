"""
This type stub file was generated by pyright.
"""

import re
import string
from collections import OrderedDict
from faker.utils.distribution import choices_distribution, choices_distribution_unique

_re_hash = re.compile(r'#')
_re_perc = re.compile(r'%')
_re_excl = re.compile(r'!')
_re_at = re.compile(r'@')
_re_qm = re.compile(r'\?')
_re_cir = re.compile(r'\^')
class BaseProvider(object):
    __provider__ = ...
    __lang__ = ...
    language_locale_codes = ...
    def __init__(self, generator) -> None:
        ...
    
    def locale(self):
        ...
    
    def language_code(self):
        ...
    
    def random_int(self, min=..., max=..., step=...):
        """
        Returns a random integer between two values.

        :param min: lower bound value (inclusive; default=0)
        :param max: upper bound value (inclusive; default=9999)
        :param step: range step (default=1)
        :returns: random integer between min and max
        """
        ...
    
    def random_digit(self):
        """
        Returns a random digit/number
        between 0 and 9.
        """
        ...
    
    def random_digit_not_null(self):
        """
        Returns a random non-zero digit/number
        between 1 and 9.
        """
        ...
    
    def random_digit_or_empty(self):
        """
        Returns a random digit/number
        between 0 and 9 or an empty string.
        """
        ...
    
    def random_digit_not_null_or_empty(self):
        """
        Returns a random non-zero digit/number
        between 1 and 9 or and empty string.
        """
        ...
    
    def random_number(self, digits=..., fix_len=...):
        """
        Returns a random number with 1 digit (default, when digits==None),
        a random number with 0 to given number of digits, or a random number
        with given number to given number of digits (when ``fix_len==True``).

        :param digits: maximum number of digits
        :param fix_len:  should the number have fixed length?
        :returns: random number with 0 to given number of digits or
            fixed length number
        """
        ...
    
    def random_letter(self):
        """Returns a random letter (between a-z and A-Z)."""
        ...
    
    def random_letters(self, length=...):
        """Returns a random letter (between a-z and A-Z)."""
        ...
    
    def random_lowercase_letter(self):
        """Returns a random lowercase letter (between a-z)."""
        ...
    
    def random_uppercase_letter(self):
        """Returns a random letter (between A-Z)."""
        ...
    
    def random_elements(self, elements=..., length=..., unique=...):
        ...
    
    def random_choices(self, elements=..., length=...):
        """
        Returns a list of random, non-unique elements from a passed object.

        If `elements` is an OrderedDict, the value will be used as a weighting
        element. For example::

            random_element(OrderedDict([
                ("{{variable_1}}", 0.5),
                ("{{variable_2}}", 0.2),
                ("{{variable_3}}", 0.2),
                ("{{variable_4}}": 0.1)
            ])

        will have the following distribution:
            * `variable_1`: 50% probability
            * `variable_2`: 20% probability
            * `variable_3`: 20% probability
            * `variable_4`: 10% probability

        """
        ...
    
    def random_element(self, elements=...):
        """
        Returns a random element from a passed object.

        If `elements` is an OrderedDict, the value will be used as a weighting
        element. For example::

            random_element(OrderedDict([
                ("{{variable_1}}", 0.5),
                ("{{variable_2}}", 0.2),
                ("{{variable_3}}", 0.2),
                ("{{variable_4}}": 0.1)
            ])

        will have the following distribution:
            * `variable_1`: 50% probability
            * `variable_2`: 20% probability
            * `variable_3`: 20% probability
            * `variable_4`: 10% probability

        """
        ...
    
    def random_sample(self, elements=..., length=...):
        """
        Returns a list of random unique elements for the specified length.
        Multiple occurrences of the same value increase its probability to be in the output.
        """
        ...
    
    def randomize_nb_elements(self, number=..., le=..., ge=..., min=..., max=...):
        """
        Returns a random value near number.

        :param number: value to which the result must be near
        :param le: result must be lower or equal to number
        :param ge: result must be greater or equal to number
        :returns: a random int near number
        """
        ...
    
    def numerify(self, text=...):
        """
        Replaces all placeholders in given text with randomized values,
        replacing: all hash sign ('#') occurrences with a random digit
        (from 0 to 9); all percentage sign ('%') occurrences with a
        random non-zero digit (from 1 to 9); all exclamation mark ('!')
        occurrences with a random digit (from 0 to 9) or an empty string;
        and all at symbol ('@') occurrences with a random non-zero digit
        (from 1 to 9) or an empty string.

        :param text: string to be parsed
        :returns: string with all numerical placeholders filled in
        """
        ...
    
    def lexify(self, text=..., letters=...):
        """
        Replaces all question mark ('?') occurrences with a random letter.

        :param text: string to be parsed
        :param letters: a set of letters to choose from.
        :returns: string with all letter placeholders filled in
        """
        ...
    
    def bothify(self, text=..., letters=...):
        """
        Replaces all placeholders with random numbers and letters.

        :param text: string to be parsed
        :returns: string with all numerical and letter placeholders filled in
        """
        ...
    
    def hexify(self, text=..., upper=...):
        """
        Replaces all circumflex ('^') occurrences with a random
        hexadecimal character.

        :param text: string to be parsed
        :param upper: Format as uppercase hexadecimal
        :returns: string with all letter placeholders filled in
        """
        ...
    


