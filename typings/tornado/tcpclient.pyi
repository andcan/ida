"""
This type stub file was generated by pyright.
"""

from tornado import gen

"""A non-blocking TCP connection factory.
"""
_INITIAL_CONNECT_TIMEOUT = 0.3
class _Connector(object):
    """A stateless implementation of the "Happy Eyeballs" algorithm.

    "Happy Eyeballs" is documented in RFC6555 as the recommended practice
    for when both IPv4 and IPv6 addresses are available.

    In this implementation, we partition the addresses by family, and
    make the first connection attempt to whichever address was
    returned first by ``getaddrinfo``.  If that connection fails or
    times out, we begin a connection in parallel to the first address
    of the other family.  If there are additional failures we retry
    with other addresses, keeping one connection attempt per family
    in flight at a time.

    http://tools.ietf.org/html/rfc6555

    """
    def __init__(self, addrinfo, connect) -> None:
        ...
    
    @staticmethod
    def split(addrinfo):
        """Partition the ``addrinfo`` list by address family.

        Returns two lists.  The first list contains the first entry from
        ``addrinfo`` and all others with the same family, and the
        second list contains all other addresses (normally one list will
        be AF_INET and the other AF_INET6, although non-standard resolvers
        may return additional families).
        """
        ...
    
    def start(self, timeout=..., connect_timeout=...):
        ...
    
    def try_connect(self, addrs):
        ...
    
    def on_connect_done(self, addrs, af, addr, future):
        ...
    
    def set_timeout(self, timeout):
        ...
    
    def on_timeout(self):
        ...
    
    def clear_timeout(self):
        ...
    
    def set_connect_timeout(self, connect_timeout):
        ...
    
    def on_connect_timeout(self):
        ...
    
    def clear_timeouts(self):
        ...
    
    def close_streams(self):
        ...
    


class TCPClient(object):
    """A non-blocking TCP connection factory.

    .. versionchanged:: 5.0
       The ``io_loop`` argument (deprecated since version 4.1) has been removed.
    """
    def __init__(self, resolver=...) -> None:
        ...
    
    def close(self):
        ...
    
    @gen.coroutine
    def connect(self, host, port, af=..., ssl_options=..., max_buffer_size=..., source_ip=..., source_port=..., timeout=...):
        """Connect to the given host and port.

        Asynchronously returns an `.IOStream` (or `.SSLIOStream` if
        ``ssl_options`` is not None).

        Using the ``source_ip`` kwarg, one can specify the source
        IP address to use when establishing the connection.
        In case the user needs to resolve and
        use a specific interface, it has to be handled outside
        of Tornado as this depends very much on the platform.

        Raises `TimeoutError` if the input future does not complete before
        ``timeout``, which may be specified in any form allowed by
        `.IOLoop.add_timeout` (i.e. a `datetime.timedelta` or an absolute time
        relative to `.IOLoop.time`)

        Similarly, when the user requires a certain source port, it can
        be specified using the ``source_port`` arg.

        .. versionchanged:: 4.5
           Added the ``source_ip`` and ``source_port`` arguments.

        .. versionchanged:: 5.0
           Added the ``timeout`` argument.
        """
        ...
    


