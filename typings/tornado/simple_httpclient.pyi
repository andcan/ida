"""
This type stub file was generated by pyright.
"""

from tornado import gen, httputil
from tornado.httpclient import AsyncHTTPClient, HTTPError
from tornado.util import PY3

if PY3:
    ...
else:
    ...
class HTTPTimeoutError(HTTPError):
    """Error raised by SimpleAsyncHTTPClient on timeout.

    For historical reasons, this is a subclass of `.HTTPClientError`
    which simulates a response code of 599.

    .. versionadded:: 5.1
    """
    def __init__(self, message) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class HTTPStreamClosedError(HTTPError):
    """Error raised by SimpleAsyncHTTPClient when the underlying stream is closed.

    When a more specific exception is available (such as `ConnectionResetError`),
    it may be raised instead of this one.

    For historical reasons, this is a subclass of `.HTTPClientError`
    which simulates a response code of 599.

    .. versionadded:: 5.1
    """
    def __init__(self, message) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class SimpleAsyncHTTPClient(AsyncHTTPClient):
    """Non-blocking HTTP client with no external dependencies.

    This class implements an HTTP 1.1 client on top of Tornado's IOStreams.
    Some features found in the curl-based AsyncHTTPClient are not yet
    supported.  In particular, proxies are not supported, connections
    are not reused, and callers cannot select the network interface to be
    used.
    """
    def initialize(self, max_clients=..., hostname_mapping=..., max_buffer_size=..., resolver=..., defaults=..., max_header_size=..., max_body_size=...):
        """Creates a AsyncHTTPClient.

        Only a single AsyncHTTPClient instance exists per IOLoop
        in order to provide limitations on the number of pending connections.
        ``force_instance=True`` may be used to suppress this behavior.

        Note that because of this implicit reuse, unless ``force_instance``
        is used, only the first call to the constructor actually uses
        its arguments. It is recommended to use the ``configure`` method
        instead of the constructor to ensure that arguments take effect.

        ``max_clients`` is the number of concurrent requests that can be
        in progress; when this limit is reached additional requests will be
        queued. Note that time spent waiting in this queue still counts
        against the ``request_timeout``.

        ``hostname_mapping`` is a dictionary mapping hostnames to IP addresses.
        It can be used to make local DNS changes when modifying system-wide
        settings like ``/etc/hosts`` is not possible or desirable (e.g. in
        unittests).

        ``max_buffer_size`` (default 100MB) is the number of bytes
        that can be read into memory at once. ``max_body_size``
        (defaults to ``max_buffer_size``) is the largest response body
        that the client will accept.  Without a
        ``streaming_callback``, the smaller of these two limits
        applies; with a ``streaming_callback`` only ``max_body_size``
        does.

        .. versionchanged:: 4.2
           Added the ``max_body_size`` argument.
        """
        ...
    
    def close(self):
        ...
    
    def fetch_impl(self, request, callback):
        ...
    


class _HTTPConnection(httputil.HTTPMessageDelegate):
    _SUPPORTED_METHODS = ...
    def __init__(self, client, request, release_callback, final_callback, max_buffer_size, tcp_client, max_header_size, max_body_size) -> None:
        ...
    
    @gen.coroutine
    def run(self):
        ...
    
    def on_connection_close(self):
        ...
    
    def headers_received(self, first_line, headers):
        ...
    
    def finish(self):
        ...
    
    def data_received(self, chunk):
        ...
    


if __name__ == "__main__":
    ...
