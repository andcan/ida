"""
This type stub file was generated by pyright.
"""

import os
import re
import sys

"""Miscellaneous utility functions and classes.

This module is used internally by Tornado.  It is not necessarily expected
that the functions and classes defined here will be useful to other
applications, but they are documented here in case they are.

The one public-facing part of this module is the `Configurable` class
and its `~Configurable.configure` method, which becomes a part of the
interface of its subclasses, including `.AsyncHTTPClient`, `.IOLoop`,
and `.Resolver`.
"""
PY3 = sys.version_info >= (3, )
if PY3:
    xrange = range
if PY3:
    ...
else:
    ...
bytes_type = bytes
if PY3:
    unicode_type = str
    basestring_type = str
else:
    unicode_type = unicode
    basestring_type = basestring
class TimeoutError(Exception):
    """Exception raised by `.with_timeout` and `.IOLoop.run_sync`.

    .. versionchanged:: 5.0:
       Unified ``tornado.gen.TimeoutError`` and
       ``tornado.ioloop.TimeoutError`` as ``tornado.util.TimeoutError``.
       Both former names remain as aliases.
    """
    ...


class ObjectDict(_ObjectDictBase):
    """Makes a dictionary behave like an object, with attribute-style access.
    """
    def __getattr__(self, name: str) -> Any:
        ...
    
    def __setattr__(self, name: str, value: Any) -> None:
        ...
    


class GzipDecompressor(object):
    """Streaming gzip decompressor.

    The interface is like that of `zlib.decompressobj` (without some of the
    optional arguments, but it understands gzip headers and checksums.
    """
    def __init__(self) -> None:
        ...
    
    def decompress(self, value: bytes, max_length: Optional[int] = ...) -> bytes:
        """Decompress a chunk, returning newly-available data.

        Some data may be buffered for later processing; `flush` must
        be called when there is no more input data to ensure that
        all data was processed.

        If ``max_length`` is given, some input data may be left over
        in ``unconsumed_tail``; you must retrieve this value and pass
        it back to a future call to `decompress` if it is not empty.
        """
        ...
    
    @property
    def unconsumed_tail(self) -> bytes:
        """Returns the unconsumed portion left over
        """
        ...
    
    def flush(self) -> bytes:
        """Return any remaining buffered data not yet returned by decompress.

        Also checks for errors such as truncated input.
        No other methods may be called on this object after `flush`.
        """
        ...
    


def import_object(name: _BaseString) -> Any:
    """Imports an object by name.

    import_object('x') is equivalent to 'import x'.
    import_object('x.y.z') is equivalent to 'from x.y import z'.

    >>> import tornado.escape
    >>> import_object('tornado.escape') is tornado.escape
    True
    >>> import_object('tornado.escape.utf8') is tornado.escape.utf8
    True
    >>> import_object('tornado') is tornado
    True
    >>> import_object('tornado.missing_module')
    Traceback (most recent call last):
        ...
    ImportError: No module named missing_module
    """
    ...

def raise_exc_info(exc_info: Tuple[type, BaseException, types.TracebackType]) -> None:
    ...

def exec_in(code: Any, glob: Dict[str, Any], loc: Optional[Mapping[str, Any]] = ...) -> Any:
    ...

if PY3:
    ...
else:
    ...
def errno_from_exception(e: BaseException) -> Optional[int]:
    """Provides the errno from an Exception object.

    There are cases that the errno attribute was not set so we pull
    the errno out of the args but if someone instantiates an Exception
    without any args you will get a tuple error. So this function
    abstracts all that behavior to give you a safe way to get the
    errno.
    """
    ...

_alphanum = frozenset("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
_re_unescape_pattern = re.compile(r'\\(.)', re.DOTALL)
def re_unescape(s: str) -> str:
    """Unescape a string escaped by `re.escape`.

    May raise ``ValueError`` for regular expressions which could not
    have been produced by `re.escape` (for example, strings containing
    ``\d`` cannot be unescaped).

    .. versionadded:: 4.4
    """
    ...

class Configurable(object):
    """Base class for configurable interfaces.

    A configurable interface is an (abstract) class whose constructor
    acts as a factory function for one of its implementation subclasses.
    The implementation subclass as well as optional keyword arguments to
    its initializer can be set globally at runtime with `configure`.

    By using the constructor as the factory method, the interface
    looks like a normal class, `isinstance` works as usual, etc.  This
    pattern is most useful when the choice of implementation is likely
    to be a global decision (e.g. when `~select.epoll` is available,
    always use it instead of `~select.select`), or when a
    previously-monolithic class has been split into specialized
    subclasses.

    Configurable subclasses must define the class methods
    `configurable_base` and `configurable_default`, and use the instance
    method `initialize` instead of ``__init__``.

    .. versionchanged:: 5.0

       It is now possible for configuration to be specified at
       multiple levels of a class hierarchy.

    """
    __impl_class: type = ...
    __impl_kwargs: Dict[str, Any] = ...
    def __new__(cls, *args, **kwargs):
        ...
    
    @classmethod
    def configurable_base(cls) -> Any:
        """Returns the base class of a configurable hierarchy.

        This will normally return the class in which it is defined.
        (which is *not* necessarily the same as the cls classmethod parameter).
        """
        ...
    
    @classmethod
    def configurable_default(cls) -> type:
        """Returns the implementation class to be used if none is configured."""
        ...
    
    def initialize(self) -> None:
        """Initialize a `Configurable` subclass instance.

        Configurable classes should use `initialize` instead of ``__init__``.

        .. versionchanged:: 4.2
           Now accepts positional arguments in addition to keyword arguments.
        """
        ...
    
    @classmethod
    def configure(cls, impl, **kwargs):
        """Sets the class to use when the base class is instantiated.

        Keyword arguments will be saved and added to the arguments passed
        to the constructor.  This can be used to set global defaults for
        some parameters.
        """
        ...
    
    @classmethod
    def configured_class(cls) -> type:
        """Returns the currently configured class."""
        ...
    


class ArgReplacer(object):
    """Replaces one value in an ``args, kwargs`` pair.

    Inspects the function signature to find an argument by name
    whether it is passed by position or keyword.  For use in decorators
    and similar wrappers.
    """
    def __init__(self, func: Callable, name: str) -> None:
        ...
    
    def get_old_value(self, args: List[Any], kwargs: Dict[str, Any], default: Any = ...) -> Any:
        """Returns the old value of the named argument without replacing it.

        Returns ``default`` if the argument is not present.
        """
        ...
    
    def replace(self, new_value: Any, args: List[Any], kwargs: Dict[str, Any]) -> Tuple[Any, List[Any], Dict[str, Any]]:
        """Replace the named argument in ``args, kwargs`` with ``new_value``.

        Returns ``(old_value, args, kwargs)``.  The returned ``args`` and
        ``kwargs`` objects may not be the same as the input objects, or
        the input objects may be mutated.

        If the named argument was not found, ``new_value`` will be added
        to ``kwargs`` and None will be returned as ``old_value``.
        """
        ...
    


def timedelta_to_seconds(td: datetime.timedelta) -> float:
    """Equivalent to td.total_seconds() (introduced in python 2.7)."""
    ...

if os.environ.get('TORNADO_NO_EXTENSION') or os.environ.get('TORNADO_EXTENSION') == '0':
    _websocket_mask = _websocket_mask_python
else:
    ...
def doctests():
    ...

