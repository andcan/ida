version: '3.2'

services:
  app:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    init: true
    volumes:
      - /var/run/docker.sock:/var/run/docker-host.sock
      - ..:/workspace:cached
    entrypoint: /usr/local/share/docker-init.sh
    command: sleep infinity
    user: vscode
    networks:
      - jce-network
  janusgraph:
    image: janusgraph/janusgraph:0.5.2
    restart: on-failure
    container_name: jce-janusgraph
    depends_on:
      # - elasticsearch
      - cassandra
    ports:
      - '8182:8182'
    networks:
      - jce-network
    environment:
      - 'JAVA_OPTIONS=-Xms3072m -Xmx3072m -javaagent:/opt/janusgraph/lib/jamm-0.3.0.jar -Dgremlin.io.kryoShimService=org.janusgraph.hadoop.serialize.JanusGraphKryoShimService'
    volumes:
      - source: ./janus/gremlin-server.yaml
        target: /etc/opt/janusgraph/gremlin-server.yaml
        read_only: true
        type: bind
      - source: ./janus/janusgraph.properties
        target: /etc/opt/janusgraph/janusgraph.properties
        read_only: true
        type: bind
      - source: ./janus/janusgraph-berkeleyje.properties
        target: /etc/opt/janusgraph/janusgraph-berkeleyje.properties
        read_only: true
        type: bind
      - 'janusgraph-default-data:/var/lib/janusgraph'
    # TODO: check why not becoming healthy, took from https://github.com/JanusGraph/janusgraph-docker/blob/master/docker-compose-cql-es.yml (0.5.2)
    #    healthcheck:
    #      test: ["CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy"]
    #      interval: 10s
    #      timeout: 30s
    #      retries: 3
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: '2.5G'
  
  cassandra:
    image: scylladb/scylla:4.2.1
    command: --memory 2048M
  #   image: cassandra:3
    container_name: jce-cassandra
    ports:
      # REST API
      - "10000:10000"
      # CQL ports (native_transport_port)
      - "9042:9042"
      # Thrift (rpc_port)
      - "9160:9160"
      # Internode
      - "7000:7000"
      - "7001:7001"
      # JMX
      - "7199:7199"
      # Prometheus monitoring
      - "9180:9180"
      - "9100:9100"
  #     - '9042:9042'
    networks:
      - jce-network
  #   environment:
  #     HEAP_NEWSIZE: 8192M
  #     MAX_HEAP_SIZE: 8192M
  #   healthcheck:
  #     test: ['CMD-SHELL', '[ $$(nodetool statusgossip) = running ]']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
    volumes:
      - cassandra:/var/lib/db
      # - cassandra:/var/lib/cassandra
      # - target: /etc/cassandra/cassandra.yaml
      #   source: ./janus/cassandra.yaml
      #   type: bind
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: '2.5G'
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0
  #   container_name: jce-elastic
  #   environment:
  #     - 'ES_JAVA_OPTS=-Xms128m -Xmx1024m'
  #     - 'http.host=0.0.0.0'
  #     - 'network.host=0.0.0.0'
  #     - 'transport.host=127.0.0.1'
  #     - 'cluster.name=docker-cluster'
  #     - 'xpack.security.enabled=false'
  #     - 'discovery.zen.minimum_master_nodes=1'
  #   ports:
  #     - '9200:9200'
  #   networks:
  #     - jce-network
  #   volumes:
  #     - elasticsearch:/usr/share/elasticsearch/data
  #   # deploy:
  #   #   resources:
  #   #     limits:
  #   #       cpus: '1'
  #   #       memory: '1G'
  graphexp:
    build:
      context: ..
      dockerfile: .devcontainer/graphexp.Dockerfile
    ports:
      - '8090:80'
    networks:
      - jce-network
  exlporer:
    image: invanalabs/graph-explorer
    ports:
      - '8888:8888'
    networks:
      - jce-network
  graphql:
    image: invanalabs/invana-engine
    environment:
      - 'GREMLIN_SERVER_URL=ws://jce-janusgraph:8182/gremlin'
    ports:
      - '8000:8000'
    networks: 
      - jce-network
  # spark-master:
  #   image: bde2020/spark-master:3.0.1-hadoop3.2
  #   container_name: spark-master
  #   ports:
  #     - "8080:8080"
  #     - "7077:7077"
  #   environment:
  #     - INIT_DAEMON_STEP=setup_spark
  #   networks:
  #     - jce-network
  # spark-worker-1:
  #   image: bde2020/spark-worker:3.0.1-hadoop3.2
  #   container_name: spark-worker-1
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - "SPARK_MASTER=spark://spark-master:7077"
  #   networks:
  #     - jce-network
networks:
  jce-network:
volumes:
  janusgraph-default-data:
  cassandra:
  # elasticsearch:
